1)Ramesh is developing a student management system for a university. In this system, you have a Student class to represent student information. You are asked to help Ramesh to handle exception which can be occurred into program according to following Scenarios:
•	class Student with attributes roll no, name, age and course. Initialize values through parameterized constructor.
•	If the age of the student is not between 15 and 21 then generate a user-defined exception "AgeNotWithinRangeException".
•	If a name contains numbers or special symbols, raise exception "NameNotValidException". Define the two exception classes.


Answer:
package com.task4;


               // Custom exception class for age not within range
	class AgeNotWithinRangeException extends Exception {
	    public AgeNotWithinRangeException(String message) {
	        super(message);
	    }
	}

	// Custom exception class for invalid name
	class NameNotValidException extends Exception {
	    public NameNotValidException(String message) {
	        super(message);
	    }
	}

	// Student class
	class Student {
	    private int rollNo;
	    private String name;
	    private int age;
	    private String course;

	    public Student(int rollNo, String name, int age, String course) throws AgeNotWithinRangeException, NameNotValidException {
	        this.rollNo = rollNo;
	        if (age < 15 || age > 21) {
	            throw new AgeNotWithinRangeException("Age is not within the range of 15 to 21.");
	        }
	        this.age = age;
	        if (!isValidName(name)) {
	            throw new NameNotValidException("Name contains numbers or special symbols.");
	        }
	        this.name = name;
	        this.course = course;
	    }

	    private boolean isValidName(String name) {
	        // Check if the name contains only alphabets and spaces
	        return name.matches("[a-zA-Z ]+");
	    }

	    public void displayInfo() {
	        System.out.println("Roll No: " + rollNo);
	        System.out.println("Name: " + name);
	        System.out.println("Age: " + age);
	        System.out.println("Course: " + course);
	    }
	}


main class:

package com.task4;


public class Main {
    public static void main(String[] args) {
        try {
            // Creating a student with valid information
            Student student1 = new Student(101, "Ramya", 20, "Computer Science");
            student1.displayInfo();

            // Creating a student with invalid age
            Student student2 = new Student(102, "velu", 25, "Mathematics");
            student2.displayInfo(); // This won't execute due to exception

        } catch (AgeNotWithinRangeException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (NameNotValidException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}



output:
Roll No: 101
Name: Ramya
Age: 20
Course: Computer Science
Error: Age is not within the range of 15 to 21.


2.Q2	Create a class Voter(voterld, name, age) with parameterized constructor. The parameterized constructor should throw a checked exception if age is less than 18. The message of exception is "invalid age for voter "

package com.task4;


	// Custom checked exception class for invalid age
	class InvalidAgeException extends Exception {
	    public InvalidAgeException(String message) {
	        super(message);
	    }
	}

	// Voter class
	class Voter {
	    private int voterID;
	    private String name;
	    private int age;

	    public Voter(int voterID, String name, int age) throws InvalidAgeException {
	        this.voterID = voterID;
	        this.name = name;
	        if (age < 18) {
	            throw new InvalidAgeException("Invalid age for voter " + name);
	        }
	        this.age = age;
	    }

	    public void displayInfo() {
	        System.out.println("Voter ID: " + voterID);
	        System.out.println("Name: " + name);
	        System.out.println("Age: " + age);
	    }
	}



Main class:
package com.task4;

public class VoteMain {
	
	    public static void main(String[] args) {
	        try {
	            // Creating a voter with valid age
	            Voter voter1 = new Voter(1001, "Ramya", 25);
	            voter1.displayInfo();

	            // Creating a voter with invalid age
	            Voter voter2 = new Voter(1002, "Rithu", 16);
	            voter2.displayInfo(); // This won't execute due to exception

	        } catch (InvalidAgeException e) {
	            System.out.println("Error: " + e.getMessage());
	        }
	    }
	}


output:
Voter ID: 1001
Name: Ramya
Age: 25
Error: Invalid age for voter Rithu

3.Q3	Store name of weekdays in an array (starting from "Sunday" at 0 index). Ask day position from user and print day name. Handle array index out of bound exception and give proper message if user enters day index outside range (0-6).


package com.task4;

import java.util.Scanner;

public class WeekDay {
	
	

	
	    public static void main(String[] args) {
	        String[] weekdays = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

	        Scanner scanner = new Scanner(System.in);
	        System.out.print("Enter the day position (0-6): ");
	        int dayIndex = scanner.nextInt();

	        try {
	            String dayName = getDayName(weekdays, dayIndex);
	            System.out.println("Day name: " + dayName);
	        } catch (ArrayIndexOutOfBoundsException e) {
	            System.out.println("Error: Day index is outside the range (0-6).");
	        }
	    }

	    public static String getDayName(String[] weekdays, int dayIndex) {
	        return weekdays[dayIndex];
	    }
	}



output:
Enter the day position (0-6): 4
Day name: Thursday

4.	Create a HashMap where keys are student names (strings) and values are their corresponding grades (integers). Create methods to add a new student, remove a student, and Display up a student's grade by name.

package com.task4;
import java.util.HashMap;
import java.util.Map;


public class StudentGrades {
	
	
	    private Map<String, Integer> studentGrades;

	    public StudentGrades() {
	        studentGrades = new HashMap<>();
	    }

	    // Method to add a new student with name and grade
	    public void addStudent(String name, int grade) {
	        studentGrades.put(name, grade);
	        System.out.println("Student '" + name + "' with grade " + grade + " added successfully.");
	    }

	    // Method to remove a student by name
	    public void removeStudent(String name) {
	        if (studentGrades.containsKey(name)) {
	            studentGrades.remove(name);
	            System.out.println("Student '" + name + "' removed successfully.");
	        } else {
	            System.out.println("Student '" + name + "' not found.");
	        }
	    }

	    // Method to display a student's grade by name
	    public void displayGrade(String name) {
	        if (studentGrades.containsKey(name)) {
	            System.out.println("Grade of student '" + name + "' is " + studentGrades.get(name));
	        } else {
	            System.out.println("Student '" + name + "' not found.");
	        }
	    }

	    public static void main(String[] args) {
	        StudentGrades studentGrades = new StudentGrades();

	        // Adding students
	        studentGrades.addStudent("Ramya", 85);
	        studentGrades.addStudent("velu", 70);
	        studentGrades.addStudent("Rithu", 90);

	        // Displaying grades
	        studentGrades.displayGrade("Ramya");
	        studentGrades.displayGrade("velu");
	        studentGrades.displayGrade("Rithu");

	        // Removing a student
	        studentGrades.removeStudent("velu");

	        // Displaying grade after removal
	        studentGrades.displayGrade("Velu");
	    }
	}




output:
Student 'Ramya' with grade 85 added successfully.
Student 'velu' with grade 70 added successfully.
Student 'Rithu' with grade 90 added successfully.
Grade of student 'Ramya' is 85
Grade of student 'velu' is 70
Grade of student 'Rithu' is 90
Student 'velu' removed successfully.
Student 'Velu' not found.


5.Q5	create a stack data structure to store Integers .Create some methods for following functionalities .
a.	Include functions for pushing elements onto the stack .
b.	popping elements from the stack .

package com.task4;
import java.util.EmptyStackException;

public class IntegerStack {
	

	
	    private int[] stackArray;
	    private int top;
	    private int capacity;

	    public IntegerStack(int capacity) {
	        this.capacity = capacity;
	        stackArray = new int[capacity];
	        top = -1; // Stack is initially empty
	    }

	    // Method to check if the stack is empty
	    public boolean isEmpty() {
	        return top == -1;
	    }

	    // Method to check if the stack is full
	    public boolean isFull() {
	        return top == capacity - 1;
	    }

	    // Method to push an element onto the stack
	    public void push(int element) {
	        if (isFull()) {
	            System.out.println("Stack overflow. Cannot push element onto the stack.");
	            return;
	        }
	        stackArray[++top] = element;
	        System.out.println("Element " + element + " pushed onto the stack.");
	    }

	    // Method to pop an element from the stack
	    public int pop() {
	        if (isEmpty()) {
	            throw new EmptyStackException();
	        }
	        int poppedElement = stackArray[top];
	        top--;
	        System.out.println("Element " + poppedElement + " popped from the stack.");
	        return poppedElement;
	    }

	    public static void main(String[] args) {
	        IntegerStack stack = new IntegerStack(5);

	        // Pushing elements onto the stack
	        stack.push(10);
	        stack.push(20);
	        stack.push(30);

	        // Popping elements from the stack
	        stack.pop();
	        stack.pop();
	        stack.pop();

	        // Trying to pop from an empty stack
	        stack.pop(); // This will throw an EmptyStackException
	    }
	}



output:
Element 10 pushed onto the stack.
Element 20 pushed onto the stack.
Element 30 pushed onto the stack.
Element 30 popped from the stack.
Element 20 popped from the stack.
Element 10 popped from the stack.
Exception in thread "main" java.util.EmptyStackException
	at com.task4.IntegerStack.pop(IntegerStack.java:41)
	at com.task4.IntegerStack.main(IntegerStack.java:63)
